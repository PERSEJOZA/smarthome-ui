{"version":3,"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/icon.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","webpack:///src/app/food-planner/components/buy-food/buy-food.component.ts","webpack:///src/app/food-planner/components/buy-food/buy-food.component.html","webpack:///src/app/food-planner/components/cookbook/cookbook.component.ts","webpack:///src/app/food-planner/components/cookbook/cookbook.component.html","webpack:///src/app/food-planner/components/cookbook/recipe/recipe.component.ts","webpack:///src/app/food-planner/components/cookbook/recipe/recipe.component.html","webpack:///src/app/food-planner/components/food-calendar/food-calendar.component.ts","webpack:///src/app/food-planner/components/food-calendar/food-calendar.component.html","webpack:///src/app/food-planner/components/food-planner-dashboard/food-planner-dashboard.component.ts","webpack:///src/app/food-planner/components/food-planner-dashboard/food-planner-dashboard.component.html","webpack:///src/app/food-planner/components/food-planner-header/food-planner-header.component.ts","webpack:///src/app/food-planner/components/food-planner-header/food-planner-header.component.html","webpack:///src/app/food-planner/components/recipe-details/recipe-details.component.ts","webpack:///src/app/food-planner/components/recipe-details/recipe-details.component.html","webpack:///src/app/food-planner/components/recipe-details/recipe-ingredients/recipe-ingredients.component.ts","webpack:///src/app/food-planner/components/recipe-details/recipe-ingredients/recipe-ingredients.component.html","webpack:///src/app/food-planner/components/recipe-details/recipe-steps/recipe-steps.component.ts","webpack:///src/app/food-planner/components/recipe-details/recipe-steps/recipe-steps.component.html","webpack:///src/app/food-planner/components/recipe-details/recipe-tags/recipe-tags.component.ts","webpack:///src/app/food-planner/components/recipe-details/recipe-tags/recipe-tags.component.html","webpack:///src/app/food-planner/food-planner-routing.module.ts","webpack:///src/app/food-planner/food-planner.component.ts","webpack:///src/app/food-planner/food-planner.component.html","webpack:///src/app/food-planner/food-planner.module.ts","webpack:///src/app/food-planner/models/recipe-db.model.ts","webpack:///src/app/food-planner/models/recipe.model.ts","webpack:///src/app/food-planner/resolvers/recipe.resolver.ts","webpack:///src/app/food-planner/resolvers/recipes.resolver.ts","webpack:///src/app/food-planner/services/recipe.service.ts"],"names":["_c0","_c1","enterDuration","_c2","MatCheckboxDefaultOptions","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","MAT_CHECKBOX_CLICK_ACTION","nextUniqueId","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","_elementRef","_MatCheckboxMixinBase","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_clickAction","_animationMode","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","parseInt","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","stopMonitoring","disableRipple","disabled","detectChanges","value","checked","fn","isDisabled","indeterminate","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","event","source","emit","stopPropagation","toggle","_transitionCheckState","_emitChangeEvent","_inputElement","origin","options","focusVia","animSuffix","nativeCheckbox","_required","newValue","changed","ɵfac","MatCheckbox_Factory","t","ɵcmp","type","selectors","viewQuery","MatCheckbox_Query","rf","ctx","_t","first","ripple","hostAttrs","hostVars","hostBindings","MatCheckbox_HostBindings","inputs","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","MatCheckbox_Template","MatCheckbox_Template_input_change_3_listener","$event","_onInteractionEvent","MatCheckbox_Template_input_click_3_listener","_onInputClick","MatCheckbox_Template_span_cdkObserveContent_12_listener","_onLabelTextChange","_r0","_r2","inputId","textContent","trim","_getAriaChecked","_isRippleDisabled","directives","styles","encapsulation","changeDetection","ctorParameters","String","decorators","args","undefined","propDecorators","selector","host","providers","None","OnPush","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","MatCheckboxRequiredValidator_Factory","ɵMatCheckboxRequiredValidator_BaseFactory","ɵdir","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","_MatCheckboxRequiredValidatorModule_Factory","ngJitMode","declarations","exports","MatCheckboxModule","MatCheckboxModule_Factory","imports","getMatIconNameNotFoundError","iconName","Error","getMatIconNoHttpProviderError","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","IconOptions","SvgIconConfig","data","nodeName","svgElement","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","_document","addSvgIconInNamespace","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","HTML","_createSvgElementForSingleIcon","addSvgIconSetInNamespace","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","alias","className","set","get","safeUrl","RESOURCE_URL","cachedIcon","cloneSvg","_loadSvgIconFromConfig","pipe","svg","key","iconKey","config","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","clear","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","map","_loadSvgIconSetFromConfig","err","errorMessage","message","handleError","console","error","foundIcon","i","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","toLowerCase","_toSvgElement","appendChild","str","div","createElement","innerHTML","attributes","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","inProgressFetch","req","responseType","configNamespace","push","MatIconRegistry_Factory","ɵprov","token","ICON_REGISTRY_PROVIDER_FACTORY","parentRegistry","httpClient","sanitizer","errorHandler","ICON_REGISTRY_PROVIDER","deps","useFactory","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","MatIconLocation","_location","location","getPathname","pathname","search","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","join","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_inline","_currentIconFetch","EMPTY","parts","split","changes","svgIconChanges","unsubscribe","svgIcon","_splitIconName","getNamedSvgIcon","_setSvgElement","previousValue","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","removeChild","elem","fontSetClass","fontSet","classNameForFontAlias","getDefaultFontSetClass","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","forEach","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","inline","_fontSet","_cleanupFontValue","_fontIcon","MatIcon_Factory","MatIcon_HostBindings","MatIcon_Template","MatIconModule","MatIconModule_Factory","MatRadioDefaultOptions","MAT_RADIO_DEFAULT_OPTIONS","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","onTouched","_radios","radio","_markForCheck","isAlreadySelected","_updateRadioButtonNames","v","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","selected","MatRadioGroup_Factory","contentQueries","MatRadioGroup_ContentQueries","dirIndex","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","_MatRadioButtonBase","radioGroup","_radioDispatcher","_providerOverride","_removeUniqueSelectionListener","listen","_touch","groupValueChanged","newCheckedState","notify","_setDisabled","_color","_MatRadioButtonBase_Factory","_MatRadioButtonBase_Query","ariaDescribedby","MatRadioButton_Factory","ɵMatRadioButton_BaseFactory","MatRadioButton_HostBindings","MatRadioButton_focus_HostBindingHandler","focus","MatRadioButton_Template","MatRadioButton_Template_input_change_5_listener","_onInputChange","MatRadioButton_Template_input_click_5_listener","MatRadioModule","MatRadioModule_Factory","_c3","_c4","MatSlideToggleDefaultOptions","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","MatSlideToggle","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_dir","_onChange","_","toggleChange","dragChange","MatSlideToggle_Factory","MatSlideToggle_Query","_thumbEl","_thumbBarEl","MatSlideToggle_HostBindings","MatSlideToggle_Template","MatSlideToggle_Template_input_change_4_listener","_onChangeEvent","MatSlideToggle_Template_input_click_4_listener","MatSlideToggle_Template_span_cdkObserveContent_11_listener","_r4","toString","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","MatSlideToggleRequiredValidator_Factory","ɵMatSlideToggleRequiredValidator_BaseFactory","_MatSlideToggleRequiredValidatorModule","_MatSlideToggleRequiredValidatorModule_Factory","MatSlideToggleModule","MatSlideToggleModule_Factory","BuyFoodComponent","templateUrl","styleUrls","CookbookComponent","route","recipes","RecipeComponent","publicRank","calculatePublicRank","sum","count","FoodCalendarComponent","FoodPlannerDashboardComponent","FoodPlannerHeaderComponent","RecipeDetailsComponent","fb","recipeStep","group","recipeSteps","image","recipeIngredient","mg","ml","pieces","recipeIngredients","recipeTag","recipeTags","recipe","setEditMoeForm","setRecipeForm","_id","_rev","recipeForm","shortDescription","timeToCook","minNumberOfPeople","tags","ingredients","steps","log","editModeFormGroup","enabled","enable","disable","maxLength","array","toggleEditMode","saveRecipe","RecipeIngredientsComponent","controls","RecipeStepsComponent","RecipeTagsComponent","routes","component","children","redirectTo","FoodPlannerRoutingModule","forChild","FoodPlannerComponent","FoodPlannerModule","RecipeDb","rev","Recipe","RecipeResolver","recipeService","paramMap","getById","RecipesResolver","getAll","RecipeService","http","configuration","nestJSServerUrl","post","put"],"mappings":"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","file":"food-planner-food-planner-module-es5.js","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-checkbox` options that can be overridden.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nfunction MatCheckboxDefaultOptions() { }\nif (false) {\n    /** @type {?|undefined} */\n    MatCheckboxDefaultOptions.prototype.color;\n    /** @type {?|undefined} */\n    MatCheckboxDefaultOptions.prototype.clickAction;\n}\n/**\n * Injection token to be used to override the default options for `mat-checkbox`.\n * @type {?}\n */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n * @deprecated Injection token will be removed, use `MAT_CHECKBOX_DEFAULT_OPTIONS` instead.\n * \\@breaking-change 10.0.0\n * @type {?}\n */\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n * @type {?}\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckbox)),\n    multi: true\n};\n/** @enum {number} */\nconst TransitionCheckState = {\n    /** The initial state of the component before any user interaction. */\n    Init: 0,\n    /** The state representing the component when it's becoming checked. */\n    Checked: 1,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked: 2,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate: 3,\n};\n/**\n * Change event object emitted by MatCheckbox.\n */\nclass MatCheckboxChange {\n}\nif (false) {\n    /**\n     * The source MatCheckbox of the event.\n     * @type {?}\n     */\n    MatCheckboxChange.prototype.source;\n    /**\n     * The new `checked` value of the checkbox.\n     * @type {?}\n     */\n    MatCheckboxChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/**\n * \\@docs-private\n */\nclass MatCheckboxBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatCheckboxBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _changeDetectorRef\n     * @param {?} _focusMonitor\n     * @param {?} _ngZone\n     * @param {?} tabIndex\n     * @param {?} _clickAction\n     * @param {?=} _animationMode\n     * @param {?=} _options\n     */\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._clickAction = _clickAction;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || {};\n        if (this._options.color) {\n            this.color = this._options.color;\n        }\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._onTouched();\n                    _changeDetectorRef.markForCheck();\n                }));\n            }\n        }));\n        // TODO: Remove this after the `_clickAction` parameter is removed as an injection parameter.\n        this._clickAction = this._clickAction || this._options.clickAction;\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Whether the checkbox is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() { }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     * @return {?}\n     */\n    get indeterminate() { return this._indeterminate; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set indeterminate(value) {\n        /** @type {?} */\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    /**\n     * @private\n     * @param {?} newState\n     * @return {?}\n     */\n    _transitionCheckState(newState) {\n        /** @type {?} */\n        let oldState = this._currentCheckState;\n        /** @type {?} */\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            /** @type {?} */\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                setTimeout((/**\n                 * @return {?}\n                 */\n                () => {\n                    element.classList.remove(animationClass);\n                }), 1000);\n            }));\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        /** @type {?} */\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                }));\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /**\n     * Focuses the checkbox.\n     * @param {?=} origin\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(origin = 'keyboard', options) {\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    /**\n     * @private\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        /** @type {?} */\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _syncIndeterminate(value) {\n        /** @type {?} */\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_CLICK_ACTION, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(MatRipple, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 19, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"div\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <div class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <div matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n      <div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div>\\n    </div>\\n    <div class=\\\"mat-checkbox-frame\\\"></div>\\n    <div class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <div class=\\\"mat-checkbox-mixedmark\\\"></div>\\n    </div>\\n  </div>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox.cdk-keyboard-focused .cdk-high-contrast-active .mat-checkbox-frame{border-style:dotted}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_CLICK_ACTION]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_required;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_disableRipple;\n    /** @type {?} */\n    MatCheckbox.ngAcceptInputType_indeterminate;\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n     * take precedence so this may be omitted.\n     * @type {?}\n     */\n    MatCheckbox.prototype.ariaLabel;\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     * @type {?}\n     */\n    MatCheckbox.prototype.ariaLabelledby;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._uniqueId;\n    /**\n     * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatCheckbox.prototype.id;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._required;\n    /**\n     * Whether the label should appear after or before the checkbox. Defaults to 'after'\n     * @type {?}\n     */\n    MatCheckbox.prototype.labelPosition;\n    /**\n     * Name value will be applied to the input element if present\n     * @type {?}\n     */\n    MatCheckbox.prototype.name;\n    /**\n     * Event emitted when the checkbox's `checked` value changes.\n     * @type {?}\n     */\n    MatCheckbox.prototype.change;\n    /**\n     * Event emitted when the checkbox's `indeterminate` value changes.\n     * @type {?}\n     */\n    MatCheckbox.prototype.indeterminateChange;\n    /**\n     * The value attribute of the native input element\n     * @type {?}\n     */\n    MatCheckbox.prototype.value;\n    /**\n     * The native `<input type=\"checkbox\">` element\n     * @type {?}\n     */\n    MatCheckbox.prototype._inputElement;\n    /**\n     * Reference to the ripple instance of the checkbox.\n     * @type {?}\n     */\n    MatCheckbox.prototype.ripple;\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * \\@docs-private\n     * @type {?}\n     */\n    MatCheckbox.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._currentAnimationClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._currentCheckState;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._controlValueAccessorChangeFn;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._checked;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._indeterminate;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._ngZone;\n    /**\n     * @deprecated `_clickAction` parameter to be removed, use\n     * `MAT_CHECKBOX_DEFAULT_OPTIONS`\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._clickAction;\n    /** @type {?} */\n    MatCheckbox.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatCheckbox.prototype._options;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatCheckboxRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = function MatCheckboxRequiredValidator_Factory(t) { return ɵMatCheckboxRequiredValidator_BaseFactory(t || MatCheckboxRequiredValidator); };\nMatCheckboxRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/checkbox-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based checkbox implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); }, imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ],\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule,\n        _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox,\n        MatCommonModule,\n        _MatCheckboxRequiredValidatorModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/checkbox/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CLICK_ACTION, MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map","import { SecurityContext, Injectable, Optional, Inject, ErrorHandler, ɵɵdefineInjectable, ɵɵinject, SkipSelf, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common/http';\nimport * as ɵngcc2 from '@angular/platform-browser';\n\nconst _c0 = [\"*\"];\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/common/http.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * \\@docs-private\n * @param {?} literal HTML that was attempted to be sanitized.\n * @return {?}\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Options that can be used to configure how an icon or the icons in an icon set are presented.\n * @record\n */\nfunction IconOptions() { }\nif (false) {\n    /**\n     * View box to set on the icon.\n     * @type {?|undefined}\n     */\n    IconOptions.prototype.viewBox;\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n    /**\n     * @param {?} data\n     * @param {?=} options\n     */\n    constructor(data, options) {\n        this.options = options;\n        // Note that we can't use `instanceof SVGElement` here,\n        // because it'll break during server-side rendering.\n        if (!!((/** @type {?} */ (data))).nodeName) {\n            this.svgElement = (/** @type {?} */ (data));\n        }\n        else {\n            this.url = (/** @type {?} */ (data));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    SvgIconConfig.prototype.url;\n    /** @type {?} */\n    SvgIconConfig.prototype.svgElement;\n    /** @type {?} */\n    SvgIconConfig.prototype.options;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    /**\n     * @param {?} _httpClient\n     * @param {?} _sanitizer\n     * @param {?} document\n     * @param {?=} _errorHandler\n     */\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /**\n         * Cache for icons loaded by direct URLs.\n         */\n        this._cachedIconsByUrl = new Map();\n        /**\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n         */\n        this._inProgressUrlFetches = new Map();\n        /**\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\n         */\n        this._fontCssClassesByAlias = new Map();\n        /**\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = 'material-icons';\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIcon(iconName, url, options) {\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which the icon should be registered.\n     * @param {?} iconName Name under which the icon should be registered.\n     * @param {?} literal SVG source of the icon.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSet(url, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} url\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon set.\n     * @param {?} literal SVG source of the icon set.\n     * @param {?=} options\n     * @return {THIS}\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        /** @type {?} */\n        const sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!sanitizedLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        /** @type {?} */\n        const svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\n    }\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} alias Alias for the font.\n     * @param {?=} className Class name override to be used instead of the alias.\n     * @return {THIS}\n     */\n    registerFontClassAlias(alias, className = alias) {\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     * @param {?} alias\n     * @return {?}\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?} className\n     * @return {THIS}\n     */\n    setDefaultFontSetClass(className) {\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     * @return {?}\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\n     * @return {?}\n     */\n    getSvgIconFromUrl(safeUrl) {\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        /** @type {?} */\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg))), map((/**\n         * @param {?} svg\n         * @return {?}\n         */\n        svg => cloneSvg(svg))));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param {?} name Name of the icon to be retrieved.\n     * @param {?=} namespace Namespace in which to look for the icon.\n     * @return {?}\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        // Return (copy of) cached icon if possible.\n        /** @type {?} */\n        const key = iconKey(namespace, name);\n        /** @type {?} */\n        const config = this._svgIconConfigs.get(key);\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        /** @type {?} */\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgElement) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(config.svgElement));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => config.svgElement = svg)), map((/**\n             * @param {?} svg\n             * @return {?}\n             */\n            svg => cloneSvg(svg))));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     * @private\n     * @param {?} name\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        /** @type {?} */\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        /** @type {?} */\n        const iconSetFetchRequests = iconSetConfigs\n            .filter((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => !iconSetConfig.svgElement))\n            .map((/**\n         * @param {?} iconSetConfig\n         * @return {?}\n         */\n        iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\n             * @param {?} err\n             * @return {?}\n             */\n            (err) => {\n                /** @type {?} */\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                /** @type {?} */\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\n                if (this._errorHandler) {\n                    this._errorHandler.handleError(new Error(errorMessage));\n                }\n                else {\n                    console.error(errorMessage);\n                }\n                return of(null);\n            })));\n        }));\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        })));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconName\n     * @param {?} iconSetConfigs\n     * @return {?}\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            /** @type {?} */\n            const config = iconSetConfigs[i];\n            if (config.svgElement) {\n                /** @type {?} */\n                const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchUrl(config.url)\n            .pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => this._createSvgElementForSingleIcon(svgText, config.options))));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _loadSvgIconSetFromConfig(config) {\n        // If the SVG for this icon set has already been parsed, do nothing.\n        if (config.svgElement) {\n            return of(config.svgElement);\n        }\n        return this._fetchUrl(config.url).pipe(map((/**\n         * @param {?} svgText\n         * @return {?}\n         */\n        svgText => {\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n            // only needs to occur if the cache is yet unset.\n            if (!config.svgElement) {\n                config.svgElement = this._svgElementFromString(svgText);\n            }\n            return config.svgElement;\n        })));\n    }\n    /**\n     * Creates a DOM element from the given SVG string, and adds default attributes.\n     * @private\n     * @param {?} responseText\n     * @param {?=} options\n     * @return {?}\n     */\n    _createSvgElementForSingleIcon(responseText, options) {\n        /** @type {?} */\n        const svg = this._svgElementFromString(responseText);\n        this._setSvgAttributes(svg, options);\n        return svg;\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     * @private\n     * @param {?} iconSet\n     * @param {?} iconName\n     * @param {?=} options\n     * @return {?}\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        /** @type {?} */\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        /** @type {?} */\n        const iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     * @private\n     * @param {?} str\n     * @return {?}\n     */\n    _svgElementFromString(str) {\n        /** @type {?} */\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        /** @type {?} */\n        const svg = (/** @type {?} */ (div.querySelector('svg')));\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _toSvgElement(element) {\n        /** @type {?} */\n        const svg = this._svgElementFromString('<svg></svg>');\n        /** @type {?} */\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     * @private\n     * @param {?} svg\n     * @param {?=} options\n     * @return {?}\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given URL. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     * @private\n     * @param {?} safeUrl\n     * @return {?}\n     */\n    _fetchUrl(safeUrl) {\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        /** @type {?} */\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        /** @type {?} */\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n        // Observable. Figure out why and fix it.\n        /** @type {?} */\n        const req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\n         * @return {?}\n         */\n        () => this._inProgressUrlFetches.delete(url))), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} iconName Name under which to register the config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @private\n     * @template THIS\n     * @this {THIS}\n     * @param {?} namespace Namespace in which to register the icon config.\n     * @param {?} config Config to be registered.\n     * @return {THIS}\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        /** @type {?} */\n        const configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\n        }\n        return (/** @type {?} */ (this));\n    }\n}\nMatIconRegistry.ɵfac = function MatIconRegistry_Factory(t) { return new (t || MatIconRegistry)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient, 8), ɵngcc0.ɵɵinject(ɵngcc2.DomSanitizer), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(ɵngcc0.ErrorHandler, 8)); };\n/** @nocollapse */\nMatIconRegistry.ctorParameters = () => [\n    { type: HttpClient, decorators: [{ type: Optional }] },\n    { type: DomSanitizer },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\n/** @nocollapse */ MatIconRegistry.ɵprov = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.HttpClient, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.DomSanitizer }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.ErrorHandler, decorators: [{\n                type: Optional\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._iconSetConfigs;\n    /**\n     * Cache for icons loaded by direct URLs.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._cachedIconsByUrl;\n    /**\n     * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._inProgressUrlFetches;\n    /**\n     * Map from font identifiers to their CSS class names. Used for icon fonts.\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._fontCssClassesByAlias;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._defaultFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._httpClient;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._sanitizer;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIconRegistry.prototype._errorHandler;\n}\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} httpClient\n * @param {?} sanitizer\n * @param {?=} document\n * @param {?=} errorHandler\n * @return {?}\n */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        [new Optional(), ErrorHandler],\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg) {\n    return (/** @type {?} */ (svg.cloneNode(true)));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatIcon.\n/**\n * \\@docs-private\n */\nclass MatIconBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatIconBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY\n});\n/**\n * Stubbed out location for `MatIcon`.\n * \\@docs-private\n * @record\n */\nfunction MatIconLocation() { }\nif (false) {\n    /** @type {?} */\n    MatIconLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\n * @type {?}\n */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke'\n];\nconst ɵ0 = /**\n * @param {?} attr\n * @return {?}\n */\nattr => `[${attr}]`;\n/**\n * Selector that can be used to find all elements that are using a `FuncIRI`.\n * @type {?}\n */\nconst funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\n/**\n * Regex that can be used to extract the id out of a FuncIRI.\n * @type {?}\n */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _iconRegistry\n     * @param {?} ariaHidden\n     * @param {?=} _location\n     * @param {?=} _errorHandler\n     */\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        /**\n         * Subscription to the current in-progress SVG icon request.\n         */\n        this._currentIconFetch = Subscription.EMPTY;\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     * @return {?}\n     */\n    get inline() {\n        return this._inline;\n    }\n    /**\n     * @param {?} inline\n     * @return {?}\n     */\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /**\n     * Font set that the icon is a part of.\n     * @return {?}\n     */\n    get fontSet() { return this._fontSet; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontSet(value) {\n        this._fontSet = this._cleanupFontValue(value);\n    }\n    /**\n     * Name of an icon within a font set.\n     * @return {?}\n     */\n    get fontIcon() { return this._fontIcon; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set fontIcon(value) {\n        this._fontIcon = this._cleanupFontValue(value);\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     * @private\n     * @param {?} iconName\n     * @return {?}\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        /** @type {?} */\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1: return ['', parts[0]]; // Use default namespace.\n            case 2: return (/** @type {?} */ (parts));\n            default: throw Error(`Invalid icon name: \"${iconName}\"`);\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n        /** @type {?} */\n        const svgIconChanges = changes['svgIcon'];\n        if (svgIconChanges) {\n            this._currentIconFetch.unsubscribe();\n            if (this.svgIcon) {\n                const [namespace, iconName] = this._splitIconName(this.svgIcon);\n                this._currentIconFetch = this._iconRegistry.getNamedSvgIcon(iconName, namespace)\n                    .pipe(take(1))\n                    .subscribe((/**\n                 * @param {?} svg\n                 * @return {?}\n                 */\n                svg => this._setSvgElement(svg)), (/**\n                 * @param {?} err\n                 * @return {?}\n                 */\n                (err) => {\n                    /** @type {?} */\n                    const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\n                    if (this._errorHandler) {\n                        this._errorHandler.handleError(new Error(errorMessage));\n                    }\n                    else {\n                        console.error(errorMessage);\n                    }\n                }));\n            }\n            else if (svgIconChanges.previousValue) {\n                this._clearSvgElement();\n            }\n        }\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        if (this._usingFontIcon()) {\n            this._updateFontIconClasses();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewChecked() {\n        /** @type {?} */\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && this._location && cachedElements.size) {\n            /** @type {?} */\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    /**\n     * @private\n     * @param {?} svg\n     * @return {?}\n     */\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n        /** @type {?} */\n        const styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\n        for (let i = 0; i < styleTags.length; i++) {\n            styleTags[i].textContent += ' ';\n        }\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        if (this._location) {\n            /** @type {?} */\n            const path = this._location.getPathname();\n            this._previousPath = path;\n            this._cacheChildrenWithExternalReferences(svg);\n            this._prependPathToReferences(path);\n        }\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _clearSvgElement() {\n        /** @type {?} */\n        const layoutElement = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            /** @type {?} */\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                layoutElement.removeChild(child);\n            }\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        /** @type {?} */\n        const elem = this._elementRef.nativeElement;\n        /** @type {?} */\n        const fontSetClass = this.fontSet ?\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\n            this._iconRegistry.getDefaultFontSetClass();\n        if (fontSetClass != this._previousFontSetClass) {\n            if (this._previousFontSetClass) {\n                elem.classList.remove(this._previousFontSetClass);\n            }\n            if (fontSetClass) {\n                elem.classList.add(fontSetClass);\n            }\n            this._previousFontSetClass = fontSetClass;\n        }\n        if (this.fontIcon != this._previousFontIconClass) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     * @private\n     * @param {?} path\n     * @return {?}\n     */\n    _prependPathToReferences(path) {\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((/**\n             * @param {?} attrs\n             * @param {?} element\n             * @return {?}\n             */\n            (attrs, element) => {\n                attrs.forEach((/**\n                 * @param {?} attr\n                 * @return {?}\n                 */\n                attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                }));\n            }));\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        /** @type {?} */\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        /** @type {?} */\n        const elements = this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map();\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach((/**\n             * @param {?} attr\n             * @return {?}\n             */\n            attr => {\n                /** @type {?} */\n                const elementWithReference = elementsWithFuncIri[i];\n                /** @type {?} */\n                const value = elementWithReference.getAttribute(attr);\n                /** @type {?} */\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    /** @type {?} */\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\n                }\n            }));\n        }\n    }\n}\nMatIcon.ɵfac = function MatIcon_Factory(t) { return new (t || MatIcon)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatIconRegistry), ɵngcc0.ɵɵinjectAttribute('aria-hidden'), ɵngcc0.ɵɵdirectiveInject(MAT_ICON_LOCATION, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ErrorHandler, 8)); };\nMatIcon.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatIcon, selectors: [[\"mat-icon\"]], hostAttrs: [\"role\", \"img\", 1, \"mat-icon\", \"notranslate\"], hostVars: 4, hostBindings: function MatIcon_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-icon-inline\", ctx.inline)(\"mat-icon-no-color\", ctx.color !== \"primary\" && ctx.color !== \"accent\" && ctx.color !== \"warn\");\n    } }, inputs: { color: \"color\", inline: \"inline\", fontSet: \"fontSet\", fontIcon: \"fontIcon\", svgIcon: \"svgIcon\" }, exportAs: [\"matIcon\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function MatIcon_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatIcon.ctorParameters = () => [\n    { type: ElementRef },\n    { type: MatIconRegistry },\n    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\n    { type: ErrorHandler, decorators: [{ type: Optional }] }\n];\nMatIcon.propDecorators = {\n    inline: [{ type: Input }],\n    svgIcon: [{ type: Input }],\n    fontSet: [{ type: Input }],\n    fontIcon: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIcon, [{\n        type: Component,\n        args: [{\n                template: '<ng-content></ng-content>',\n                selector: 'mat-icon',\n                exportAs: 'matIcon',\n                inputs: ['color'],\n                host: {\n                    'role': 'img',\n                    'class': 'mat-icon notranslate',\n                    '[class.mat-icon-inline]': 'inline',\n                    '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"'\n                },\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MatIconRegistry }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['aria-hidden']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_ICON_LOCATION]\n            }] }, { type: ɵngcc0.ErrorHandler, decorators: [{\n                type: Optional\n            }] }]; }, { inline: [{\n            type: Input\n        }], fontSet: [{\n            type: Input\n        }], fontIcon: [{\n            type: Input\n        }], svgIcon: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatIcon.ngAcceptInputType_inline;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._inline;\n    /**\n     * Name of the icon in the SVG icon set.\n     * @type {?}\n     */\n    MatIcon.prototype.svgIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontSet;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._fontIcon;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontSetClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousFontIconClass;\n    /**\n     * Keeps track of the current page path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._previousPath;\n    /**\n     * Keeps track of the elements and attributes that we've prefixed with the current path.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._elementsWithExternalReferences;\n    /**\n     * Subscription to the current in-progress SVG icon request.\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._currentIconFetch;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._iconRegistry;\n    /**\n     * @deprecated `location` parameter to be made required.\n     * \\@breaking-change 8.0.0\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._location;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatIcon.prototype._errorHandler;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/icon-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatIconModule {\n}\nMatIconModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatIconModule });\nMatIconModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatIconModule_Factory(t) { return new (t || MatIconModule)(); }, imports: [[MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatIconModule, { declarations: function () { return [MatIcon]; }, imports: function () { return [MatCommonModule]; }, exports: function () { return [MatIcon,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatIconModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule],\n                exports: [MatIcon, MatCommonModule],\n                declarations: [MatIcon]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/icon/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n\n//# sourceMappingURL=icon.js.map","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, ContentChildren, Input, Optional, ElementRef, Inject, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nfunction MatRadioDefaultOptions() { }\nif (false) {\n    /** @type {?} */\n    MatRadioDefaultOptions.prototype.color;\n}\n/** @type {?} */\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @return {?}\n */\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatRadioGroup)),\n    multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nclass MatRadioChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nif (false) {\n    /**\n     * The MatRadioButton that emits the change event.\n     * @type {?}\n     */\n    MatRadioChange.prototype.source;\n    /**\n     * The value of the MatRadioButton.\n     * @type {?}\n     */\n    MatRadioChange.prototype.value;\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /**\n     * @param {?} _changeDetector\n     */\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /**\n         * Selected value for the radio group.\n         */\n        this._value = null;\n        /**\n         * The HTML name attribute applied to radio buttons in this group.\n         */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /**\n         * The currently selected radio button. Should match value.\n         */\n        this._selected = null;\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n         */\n        this._labelPosition = 'after';\n        /**\n         * Whether the radio group is disabled.\n         */\n        this._disabled = false;\n        /**\n         * Whether the radio group is required.\n         */\n        this._required = false;\n        /**\n         * The method to be called in order to update ngModel\n         */\n        this._controlValueAccessorChangeFn = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * \\@docs-private\n         */\n        this.onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * Name of the radio button group. All radio buttons inside this group will use this name.\n     * @return {?}\n     */\n    get name() { return this._name; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     * @return {?}\n     */\n    get selected() { return this._selected; }\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /**\n     * Whether the radio group is disabled\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Whether the radio group is required\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     * @return {?}\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            }));\n        }\n    }\n    /**\n     * Updates the `selected` radio button from the internal _value state.\n     * @private\n     * @return {?}\n     */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        /** @type {?} */\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            }));\n        }\n    }\n    /**\n     * Dispatch change event with current selection and group value.\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((/**\n             * @param {?} radio\n             * @return {?}\n             */\n            radio => radio._markForCheck()));\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn Callback to be registered.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled Whether the control should be disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return new (t || MatRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" }, exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR])] });\n/** @nocollapse */\nMatRadioGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\nMatRadioGroup.propDecorators = {\n    change: [{ type: Output }],\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => MatRadioButton)), { descendants: true },] }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(( /**\n                             * @return {?}\n                             */() => MatRadioButton)), { descendants: true }]\n        }], color: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatRadioGroup.ngAcceptInputType_required;\n    /**\n     * Selected value for the radio group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._value;\n    /**\n     * The HTML name attribute applied to radio buttons in this group.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._name;\n    /**\n     * The currently selected radio button. Should match value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._selected;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._isInitialized;\n    /**\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._labelPosition;\n    /**\n     * Whether the radio group is disabled.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._disabled;\n    /**\n     * Whether the radio group is required.\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._required;\n    /**\n     * The method to be called in order to update ngModel\n     * @type {?}\n     */\n    MatRadioGroup.prototype._controlValueAccessorChangeFn;\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * \\@docs-private\n     * @type {?}\n     */\n    MatRadioGroup.prototype.onTouched;\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    MatRadioGroup.prototype.change;\n    /**\n     * Child radio buttons.\n     * @type {?}\n     */\n    MatRadioGroup.prototype._radios;\n    /**\n     * Theme color for all of the radio buttons in the group.\n     * @type {?}\n     */\n    MatRadioGroup.prototype.color;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatRadioGroup.prototype._changeDetector;\n}\n// Boilerplate for applying mixins to MatRadioButton.\n/**\n * \\@docs-private\n */\nclass MatRadioButtonBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatRadioButtonBase.prototype.disabled;\n    /** @type {?} */\n    MatRadioButtonBase.prototype._elementRef;\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\n/** @type {?} */\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * \\@docs-private\n * @abstract\n */\n// tslint:disable-next-line:class-name\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    /**\n     * @param {?} radioGroup\n     * @param {?} elementRef\n     * @param {?} _changeDetector\n     * @param {?} _focusMonitor\n     * @param {?} _radioDispatcher\n     * @param {?=} _animationMode\n     * @param {?=} _providerOverride\n     */\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /**\n         * The unique ID for the radio button.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /**\n         * Whether this radio is checked.\n         */\n        this._checked = false;\n        /**\n         * Value assigned to this radio.\n         */\n        this._value = null;\n        /**\n         * Unregister function for _radioDispatcher\n         */\n        this._removeUniqueSelectionListener = (/**\n         * @return {?}\n         */\n        () => { });\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((/**\n             * @param {?} id\n             * @param {?} name\n             * @return {?}\n             */\n            (id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            }));\n    }\n    /**\n     * Whether this radio button is checked.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        /** @type {?} */\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /**\n     * The value of this radio button.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /**\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /**\n     * Whether the radio button is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /**\n     * Whether the radio button is required.\n     * @return {?}\n     */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /**\n     * Theme color of the radio button.\n     * @return {?}\n     */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set color(newValue) { this._color = newValue; }\n    /**\n     * ID of the native input element inside `<mat-radio-button>`\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * Focuses the radio button.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     * @return {?}\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /**\n     * Dispatch change event with current value.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    /**\n     * @return {?}\n     */\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        /** @type {?} */\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /**\n     * Sets the disabled state and marks for check if a change occurred.\n     * @protected\n     * @param {?} value\n     * @return {?}\n     */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(MatRadioGroup, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8)); };\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_checked;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_disabled;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_required;\n    /** @type {?} */\n    _MatRadioButtonBase.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._uniqueId;\n    /**\n     * The unique ID for the radio button.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.id;\n    /**\n     * Analog to HTML 'name' attribute used to group radios for unique selection.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.name;\n    /**\n     * Used to set the 'aria-label' attribute on the underlying input element.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaLabel;\n    /**\n     * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaLabelledby;\n    /**\n     * The 'aria-describedby' attribute is read after the element's label and field type.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.ariaDescribedby;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._labelPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._color;\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.change;\n    /**\n     * The parent radio group. May or may not be present.\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype.radioGroup;\n    /**\n     * Whether this radio is checked.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._checked;\n    /**\n     * Whether this radio is disabled.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._disabled;\n    /**\n     * Whether this radio is required.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._required;\n    /**\n     * Value assigned to this radio.\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._value;\n    /**\n     * Unregister function for _radioDispatcher\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._removeUniqueSelectionListener;\n    /**\n     * The native `<input type=radio>` element\n     * @type {?}\n     */\n    _MatRadioButtonBase.prototype._inputElement;\n    /**\n     * @type {?}\n     * @protected\n     */\n    _MatRadioButtonBase.prototype._changeDetector;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._radioDispatcher;\n    /** @type {?} */\n    _MatRadioButtonBase.prototype._animationMode;\n    /**\n     * @type {?}\n     * @private\n     */\n    _MatRadioButtonBase.prototype._providerOverride;\n}\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return ɵMatRadioButton_BaseFactory(t || MatRadioButton); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", 0 - 1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nconst ɵMatRadioButton_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatRadioButton);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/radio-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); }, imports: [[MatRippleModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup,\n        MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup,\n        MatRadioButton,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/radio/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase };\n\n//# sourceMappingURL=radio.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default `mat-slide-toggle` options that can be overridden.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nfunction MatSlideToggleDefaultOptions() { }\nif (false) {\n    /**\n     * Whether toggle action triggers value changes in slide toggle.\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableToggleValue;\n    /**\n     * Whether drag action triggers value changes in slide toggle.\n     * @deprecated No longer being used.\n     * \\@breaking-change 10.0.0\n     * @type {?|undefined}\n     */\n    MatSlideToggleDefaultOptions.prototype.disableDragValue;\n}\n/**\n * Injection token to be used to override the default options for `mat-slide-toggle`.\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: (/**\n     * @return {?}\n     */\n    () => ({ disableToggleValue: false }))\n});\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Increasing integer for generating unique ids for slide-toggle components.\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggle)),\n    multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nclass MatSlideToggleChange {\n    /**\n     * @param {?} source\n     * @param {?} checked\n     */\n    constructor(source, checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\nif (false) {\n    /**\n     * The source MatSlideToggle of the event.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.source;\n    /**\n     * The new `checked` value of the MatSlideToggle.\n     * @type {?}\n     */\n    MatSlideToggleChange.prototype.checked;\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/**\n * \\@docs-private\n */\nclass MatSlideToggleBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatSlideToggleBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    /**\n     * @param {?} elementRef\n     * @param {?} _focusMonitor\n     * @param {?} _changeDetectorRef\n     * @param {?} tabIndex\n     * @param {?} _ngZone\n     * @param {?} defaults\n     * @param {?=} _animationMode\n     * @param {?=} _dir\n     */\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (/**\n         * @param {?} _\n         * @return {?}\n         */\n        (_) => { });\n        this._onTouched = (/**\n         * @return {?}\n         */\n        () => { });\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /**\n         * Name value will be applied to the input element if present.\n         */\n        this.name = null;\n        /**\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n         */\n        this.id = this._uniqueId;\n        /**\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n         */\n        this.labelPosition = 'after';\n        /**\n         * Used to set the aria-label attribute on the underlying input element.\n         */\n        this.ariaLabel = null;\n        /**\n         * Used to set the aria-labelledby attribute on the underlying input element.\n         */\n        this.ariaLabelledby = null;\n        /**\n         * An event will be dispatched each time the slide-toggle changes its value.\n         */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 10.0.0\n         */\n        this.dragChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /**\n     * Whether the slide-toggle is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /**\n     * Whether the slide-toggle element is checked or not.\n     * @return {?}\n     */\n    get checked() { return this._checked; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Returns the unique id for the visual hidden input.\n     * @return {?}\n     */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((/**\n         * @param {?} focusOrigin\n         * @return {?}\n         */\n        focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => this._onTouched()));\n            }\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Method being called whenever the underlying input emits a change event.\n     * @param {?} event\n     * @return {?}\n     */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /**\n     * Method being called whenever the slide-toggle has been clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Implemented as part of ControlValueAccessor.\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Implemented as a part of ControlValueAccessor.\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Focuses the slide-toggle.\n     * @param {?=} options\n     * @return {?}\n     */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Toggles the checked state of the slide-toggle.\n     * @return {?}\n     */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     * @private\n     * @return {?}\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    dragChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_required;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_checked;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatSlideToggle.ngAcceptInputType_disableRipple;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onChange;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._onTouched;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._uniqueId;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._required;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._checked;\n    /**\n     * Reference to the thumb HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbEl;\n    /**\n     * Reference to the thumb bar HTMLElement.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._thumbBarEl;\n    /**\n     * Name value will be applied to the input element if present.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.name;\n    /**\n     * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.id;\n    /**\n     * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.labelPosition;\n    /**\n     * Used to set the aria-label attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabel;\n    /**\n     * Used to set the aria-labelledby attribute on the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.ariaLabelledby;\n    /**\n     * An event will be dispatched each time the slide-toggle changes its value.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.change;\n    /**\n     * An event will be dispatched each time the slide-toggle input is toggled.\n     * This event is always emitted when the user toggles the slide toggle, but this does not mean\n     * the slide toggle's value has changed.\n     * @type {?}\n     */\n    MatSlideToggle.prototype.toggleChange;\n    /**\n     * An event will be dispatched each time the slide-toggle is dragged.\n     * This event is always emitted when the user drags the slide toggle to make a change greater\n     * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n     * the user toggles the slide toggle to change its value.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @type {?}\n     */\n    MatSlideToggle.prototype.dragChange;\n    /**\n     * Reference to the underlying input element.\n     * @type {?}\n     */\n    MatSlideToggle.prototype._inputElement;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatSlideToggle.prototype._changeDetectorRef;\n    /** @type {?} */\n    MatSlideToggle.prototype.defaults;\n    /** @type {?} */\n    MatSlideToggle.prototype._animationMode;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-required-validator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef((/**\n     * @return {?}\n     */\n    () => MatSlideToggleRequiredValidator)),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/slide-toggle-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * This module is used by both original and MDC-based slide-toggle implementations.\n */\n// tslint:disable-next-line:class-name\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/slide-toggle/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-buy-food',\r\n  templateUrl: './buy-food.component.html',\r\n  styleUrls: ['./buy-food.component.scss'],\r\n})\r\nexport class BuyFoodComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<p>buy-food works!</p>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\nimport {RecipeDb} from '../../models/recipe-db.model';\r\n\r\n@Component({\r\n  selector: 'app-cookbook',\r\n  templateUrl: './cookbook.component.html',\r\n  styleUrls: ['./cookbook.component.scss']\r\n})\r\nexport class CookbookComponent implements OnInit {\r\n  public recipes: RecipeDb[];\r\n\r\n  constructor(private route: ActivatedRoute) {}\r\n\r\n  ngOnInit() {\r\n    this.route.data.subscribe((data: {recipes: RecipeDb[]}) => {\r\n      this.recipes = data.recipes;\r\n    });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <app-recipe *ngFor=\"let recipe of recipes\" [recipe]=\"recipe\"></app-recipe>\r\n</div>\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport {RecipeDb} from 'src/app/food-planner/models/recipe-db.model';\n\n@Component({\n  selector: 'app-recipe',\n  templateUrl: './recipe.component.html',\n  styleUrls: ['./recipe.component.scss']\n})\nexport class RecipeComponent implements OnInit {\n  @Input() recipe: RecipeDb;\n  public publicRank: number;\n  constructor() {}\n\n  ngOnInit() {\n    this.publicRank = this.calculatePublicRank();\n  }\n\n  private calculatePublicRank() {\n    const sum = 0;\n    const count = 0;\n    // this.recipe.reviews.forEach(review => {\n    //   // if (!!review.rank) {\n    //   //   sum = sum + review.rank;\n    //   //   count++;\n    //   // }\n    // });\n\n    return sum / count;\n  }\n}\n","<div class=\"container\" [routerLink]=\"['../cook/', recipe._id]\">\n  <div class=\"image\"></div>\n  <div class=\"recipe-label\">RECIPE</div>\n  <div class=\"tag\"><span *ngFor=\"let tag of recipe.tags\">tag</span></div>\n  <div class=\"recipe-name\">\n    <h4>{{ recipe.name }}</h4>\n  </div>\n  <div class=\"description\">{{ recipe.shortDescription }}</div>\n  <div class=\"reviews\">{{ publicRank }}</div>\n  <div class=\"personal-rank\">{{ recipe }}</div>\n  <div class=\"edit\">Edit</div>\n</div>\n","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-food-calendar',\r\n  templateUrl: './food-calendar.component.html',\r\n  styleUrls: ['./food-calendar.component.scss'],\r\n})\r\nexport class FoodCalendarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<p>food-calendar works!</p>\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-food-planner-dashboard',\r\n  templateUrl: './food-planner-dashboard.component.html',\r\n  styleUrls: ['./food-planner-dashboard.component.scss'],\r\n})\r\nexport class FoodPlannerDashboardComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<p>food-planner-dashboard works!</p>\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-food-planner-header',\r\n  templateUrl: './food-planner-header.component.html',\r\n  styleUrls: ['./food-planner-header.component.scss'],\r\n})\r\nexport class FoodPlannerHeaderComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<div class=\"container\">\r\n  <div>\r\n    <span class=\"link\" [routerLink]=\"['./']\" routerLinkActive=\"active\">Food Planner</span>\r\n  </div>\r\n  <span class=\"link\" [routerLink]=\"['./cook']\" routerLinkActive=\"active\">Cook</span>\r\n  <span class=\"link\" [routerLink]=\"['./plan']\" routerLinkActive=\"active\">Plan</span>\r\n  <span class=\"link\" [routerLink]=\"['./buy']\" routerLinkActive=\"active\">Buy</span>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {ActivatedRoute} from '@angular/router';\n\nimport {RecipeDb} from '../../models/recipe-db.model';\n\n@Component({\n  selector: 'app-recipe-details',\n  templateUrl: './recipe-details.component.html',\n  styleUrls: ['./recipe-details.component.scss']\n})\nexport class RecipeDetailsComponent implements OnInit {\n  constructor(private route: ActivatedRoute, private fb: FormBuilder) {}\n  public recipe: RecipeDb;\n  public recipeForm: FormGroup;\n  public editModeFormGroup: FormGroup;\n\n  public recipeStep: FormGroup = this.fb.group({\n    name: ['', Validators.required],\n    message: ['']\n  });\n  public recipeSteps: FormGroup = this.fb.group({\n    name: ['', Validators.required],\n    message: [''],\n    image: ['']\n  });\n  public recipeIngredient: FormGroup = this.fb.group({\n    name: ['', Validators.required],\n    mg: [''],\n    ml: [''],\n    pieces: ['']\n  });\n  public recipeIngredients: FormGroup = this.fb.group({\n    name: ['', Validators.required],\n    mg: [''],\n    ml: [''],\n    pieces: ['']\n  });\n  public recipeTag: FormGroup = this.fb.group({\n    name: ['']\n  });\n  public recipeTags: FormGroup = this.fb.group({\n    name: ['']\n  });\n\n  ngOnInit() {\n    this.route.data.subscribe((data: {recipe: RecipeDb}) => {\n      this.recipe = data.recipe;\n    });\n    this.setEditMoeForm();\n    this.setRecipeForm();\n  }\n\n  public saveRecipe() {\n    this.recipe = new RecipeDb(\n      this.recipe._id,\n      this.recipe._rev,\n      this.recipeForm.value.name,\n      this.recipeForm.value.image,\n      this.recipeForm.value.shortDescription,\n      this.recipeForm.value.timeToCook,\n      this.recipeForm.value.minNumberOfPeople,\n      this.recipeForm.value.tags,\n      this.recipeForm.value.ingredients,\n      this.recipeForm.value.steps\n    );\n\n    console.log(this.recipe);\n  }\n\n  public toggleEditMode() {\n    if (!this.editModeFormGroup.value.enabled) {\n      this.recipeForm.enable();\n    } else {\n      this.recipeForm.disable();\n    }\n  }\n\n  private setRecipeForm(): void {\n    this.recipeForm = this.fb.group({\n      name: [this.recipe.name, Validators.required],\n      image: [''],\n      shortDescription: [this.recipe.shortDescription, Validators.maxLength(300)],\n      timeToCook: [this.recipe.timeToCook],\n      minNumberOfPeople: [this.recipe.minNumberOfPeople],\n      tags: this.fb.array([this.recipeTag]),\n      ingredients: this.fb.array([this.recipeIngredient]),\n      steps: this.fb.array([this.recipeStep])\n    });\n\n    this.recipeForm.disable();\n  }\n\n  private setEditMoeForm(): void {\n    this.editModeFormGroup = this.fb.group({\n      enabled: [false]\n    });\n  }\n}\n","<form class=\"example-container\" [formGroup]=\"editModeFormGroup\">\n  <mat-slide-toggle formControlName=\"enabled\" (click)=\"toggleEditMode()\">Edit mode!</mat-slide-toggle>\n</form>\n<form [formGroup]=\"recipeForm\" (ngSubmit)=\"saveRecipe()\">\n  <div class=\"container\">\n    <mat-form-field class=\"name\">\n      <input matInput type=\"text\" formControlName=\"name\" required />\n    </mat-form-field>\n    <div class=\"image\">\n      <img *ngIf=\"recipeForm.value.image\" [src]=\"recipeForm.value.image\" />\n      <app-image-cropper [form]=\"recipeForm\"></app-image-cropper>\n    </div>\n    <div class=\"short-info\">\n      <mat-form-field>\n        maxNumberOfPeople:\n        <input matInput type=\"number\" formControlName=\"minNumberOfPeople\" />\n      </mat-form-field>\n      <mat-form-field>\n        timeToCook:\n        <input matInput type=\"number\" formControlName=\"timeToCook\" />\n      </mat-form-field>\n    </div>\n\n    <app-recipe-ingredients class=\"ingredients\" [recipeForm]=\"recipeForm\" [recipeIngredient]=\"recipeIngredient\">\n    </app-recipe-ingredients>\n    <app-recipe-steps class=\"recipe\" [recipeForm]=\"recipeForm\" [recipeStep]=\"recipeStep\"></app-recipe-steps>\n    <app-recipe-tags class=\"tag\" [recipeForm]=\"recipeForm\" [recipeTag]=\"recipeTag\"></app-recipe-tags>\n\n    <div class=\"reviews\"></div>\n    <button class=\"save\" type=\"submit\" [disabled]=\"!recipeForm.valid\">Save</button>\n  </div>\n</form>\n\n<div>\n  {{ recipe | json }}\n</div>\n<div>\n  {{ recipeForm.value | json }}\n</div>\n{{ editModeFormGroup.value | json }}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {FormArray, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-recipe-ingredients',\n  templateUrl: './recipe-ingredients.component.html',\n  styleUrls: ['./recipe-ingredients.component.scss']\n})\nexport class RecipeIngredientsComponent implements OnInit {\n  @Input() public recipeForm: FormGroup;\n  @Input() public recipeIngredient: FormGroup;\n\n  ngOnInit() {}\n\n  public addIngredient() {\n    (this.recipeForm.controls.ingredients as FormArray).push(this.recipeIngredient);\n  }\n}\n","<div [formGroup]=\"recipeForm\">\n  ingredients\n  <button (click)=\"addIngredient()\" *ngIf=\"recipeForm.enabled\">Add ingredient</button>\n  <div class=\"content\" formArrayName=\"ingredients\">\n    <div>Name</div>\n    <div>mg</div>\n    <div>ml</div>\n    <div>image</div>\n    <ng-container [formGroupName]=\"i\" *ngFor=\"let ingredient of recipeForm.controls.ingredients; let i = index\">\n      <mat-form-field>\n        <input matInput type=\"text\" formControlName=\"name\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput type=\"number\" formControlName=\"mg\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput type=\"number\" formControlName=\"ml\" />\n      </mat-form-field>\n      <mat-form-field>\n        <input matInput type=\"number\" formControlName=\"pieces\" />\n      </mat-form-field>\n    </ng-container>\n  </div>\n</div>\n","import {Component, Input} from '@angular/core';\nimport {FormArray, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-recipe-steps',\n  templateUrl: './recipe-steps.component.html',\n  styleUrls: ['./recipe-steps.component.scss']\n})\nexport class RecipeStepsComponent {\n  @Input() public recipeForm: FormGroup;\n  @Input() private recipeStep: FormGroup;\n\n  public addRecipeStep() {\n    (this.recipeForm.controls.steps as FormArray).push(this.recipeStep);\n  }\n}\n","<div [formGroup]=\"recipeForm\">\n  RECIPE\n  <div formArrayName=\"steps\">\n    <button (click)=\"addRecipeStep()\" *ngIf=\"recipeForm.enabled\">Add step</button>\n    <div [formGroupName]=\"i\" *ngFor=\"let step of recipeForm.controls.steps; let i = index\">\n      <label>\n        name:\n        <input matInput type=\"text\" formControlName=\"name\" />\n      </label>\n      <label>\n        message:\n        <input matInput type=\"text\" formControlName=\"message\" />\n      </label>\n    </div>\n  </div>\n</div>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {FormArray, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-recipe-tags',\n  templateUrl: './recipe-tags.component.html',\n  styleUrls: ['./recipe-tags.component.scss']\n})\nexport class RecipeTagsComponent implements OnInit {\n  @Input() public recipeForm: FormGroup;\n  @Input() public recipeTag: FormGroup;\n\n  ngOnInit() {}\n\n  public addTag() {\n    (this.recipeForm.controls.tags as FormArray).push(this.recipeTag);\n  }\n}\n","<div [formGroup]=\"recipeForm\">\n  <div formArrayName=\"tags\">\n    <button (click)=\"addTag()\" *ngIf=\"recipeForm.enabled\">Add tag</button>\n    Tags\n    <div [formGroupName]=\"i\" *ngFor=\"let tag of recipeForm.controls.tags; let i = index\">\n      <label>\n        <input matInput type=\"text\" formControlName=\"name\" />\n      </label>\n    </div>\n  </div>\n</div>\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\n\r\nimport {BuyFoodComponent} from './components/buy-food/buy-food.component';\r\nimport {CookbookComponent} from './components/cookbook/cookbook.component';\r\nimport {FoodCalendarComponent} from './components/food-calendar/food-calendar.component';\r\nimport {FoodPlannerDashboardComponent} from './components/food-planner-dashboard/food-planner-dashboard.component';\r\nimport {RecipeDetailsComponent} from './components/recipe-details/recipe-details.component';\r\nimport {FoodPlannerComponent} from './food-planner.component';\r\nimport {RecipeResolver} from './resolvers/recipe.resolver';\r\nimport {RecipesResolver} from './resolvers/recipes.resolver';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: FoodPlannerComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: FoodPlannerDashboardComponent\r\n      },\r\n      {\r\n        path: 'cook',\r\n        component: CookbookComponent,\r\n        resolve: {\r\n          recipes: RecipesResolver\r\n        }\r\n      },\r\n      {\r\n        path: 'cook/:id',\r\n        component: RecipeDetailsComponent,\r\n        resolve: {\r\n          recipe: RecipeResolver\r\n        }\r\n      },\r\n      {\r\n        path: 'plan',\r\n        component: FoodCalendarComponent\r\n      },\r\n      {\r\n        path: 'buy',\r\n        component: BuyFoodComponent\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class FoodPlannerRoutingModule {}\r\n","import {Component, OnInit} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-food-planner',\r\n  templateUrl: './food-planner.component.html',\r\n  styleUrls: ['./food-planner.component.scss'],\r\n})\r\nexport class FoodPlannerComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n","<app-header>\r\n  <app-food-planner-header></app-food-planner-header>\r\n</app-header>\r\n<router-outlet></router-outlet>\r\n","import {NgModule} from '@angular/core';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\n\r\nimport {SharedModule} from '../shared/shared.module';\r\nimport {BuyFoodComponent} from './components/buy-food/buy-food.component';\r\nimport {CookbookComponent} from './components/cookbook/cookbook.component';\r\nimport {RecipeComponent} from './components/cookbook/recipe/recipe.component';\r\nimport {FoodCalendarComponent} from './components/food-calendar/food-calendar.component';\r\nimport {FoodPlannerDashboardComponent} from './components/food-planner-dashboard/food-planner-dashboard.component';\r\nimport {FoodPlannerHeaderComponent} from './components/food-planner-header/food-planner-header.component';\r\nimport {RecipeDetailsComponent} from './components/recipe-details/recipe-details.component';\r\nimport {RecipeIngredientsComponent} from './components/recipe-details/recipe-ingredients/recipe-ingredients.component';\r\nimport {RecipeStepsComponent} from './components/recipe-details/recipe-steps/recipe-steps.component';\r\nimport {RecipeTagsComponent} from './components/recipe-details/recipe-tags/recipe-tags.component';\r\nimport {FoodPlannerRoutingModule} from './food-planner-routing.module';\r\nimport {FoodPlannerComponent} from './food-planner.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FoodPlannerComponent,\r\n    FoodPlannerHeaderComponent,\r\n    FoodPlannerDashboardComponent,\r\n    CookbookComponent,\r\n    FoodCalendarComponent,\r\n    BuyFoodComponent,\r\n    RecipeComponent,\r\n    RecipeDetailsComponent,\r\n    RecipeIngredientsComponent,\r\n    RecipeStepsComponent,\r\n    RecipeTagsComponent\r\n  ],\r\n  imports: [\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatRadioModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n    FoodPlannerRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class FoodPlannerModule {}\r\n","import {Ingredient} from './ingredient.model';\r\nimport {RecipeStep} from './recipe-step.model';\r\nimport {Recipe} from './recipe.model';\r\n\r\nexport class RecipeDb extends Recipe {\r\n  // tslint:disable-next-line: variable-name\r\n  public _id: string;\r\n  // tslint:disable-next-line: variable-name\r\n  public _rev: string;\r\n\r\n  public constructor(\r\n    id: string,\r\n    rev: string,\r\n    name: string,\r\n    image: any,\r\n    shortDescription: string,\r\n    timeToCook: number,\r\n    minNumberOfPeople: number,\r\n    tags: string[],\r\n    ingredients: Ingredient[],\r\n    steps: RecipeStep[]\r\n  ) {\r\n    super();\r\n    this._id = id;\r\n    this._rev = rev;\r\n    this.name = name;\r\n    this.image = image;\r\n    this.shortDescription = shortDescription;\r\n    this.timeToCook = timeToCook;\r\n    this.minNumberOfPeople = minNumberOfPeople;\r\n    this.tags = tags;\r\n    this.ingredients = ingredients;\r\n    this.steps = steps;\r\n  }\r\n}\r\n","import {Ingredient} from './ingredient.model';\r\nimport {RecipeStep} from './recipe-step.model';\r\n\r\nexport abstract class Recipe {\r\n  public name: string; // equal to id\r\n  public image: string;\r\n  public shortDescription: string;\r\n  public timeToCook: number;\r\n  public minNumberOfPeople: number;\r\n  public tags: string[];\r\n  public ingredients: Ingredient[];\r\n  public steps: RecipeStep[];\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve} from '@angular/router';\nimport {Observable} from 'rxjs';\n\nimport {RecipeDb} from '../models/recipe-db.model';\nimport {RecipeService} from '../services/recipe.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeResolver implements Resolve<RecipeDb> {\n  constructor(private recipeService: RecipeService) {}\n\n  public resolve(route: ActivatedRouteSnapshot): Observable<RecipeDb> | Observable<never> {\n    const id = route.paramMap.get('id');\n\n    return this.recipeService.getById(id);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport {Observable} from 'rxjs';\n\nimport {RecipeDb} from '../models/recipe-db.model';\nimport {RecipeService} from '../services/recipe.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipesResolver implements Resolve<RecipeDb[]> {\n  constructor(private recipeService: RecipeService) {}\n\n  public resolve(): Observable<RecipeDb[]> | Observable<never> {\n    return this.recipeService.getAll();\n  }\n}\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {ConfigurationService} from '../../services/configuration.service';\nimport {DbSuccessResponse} from '../models/dbSuccessResponse.model';\nimport {RecipeDb} from '../models/recipe-db.model';\nimport {Recipe} from '../models/recipe.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RecipeService {\n  constructor(private http: HttpClient, private configuration: ConfigurationService) {}\n\n  getById(id: string): Observable<RecipeDb> {\n    return this.http.get<RecipeDb>(`${this.configuration.nestJSServerUrl}/recipes/${id}`);\n  }\n\n  getAll(): Observable<RecipeDb[]> {\n    return this.http.get<RecipeDb[]>(`${this.configuration.nestJSServerUrl}/recipes`);\n  }\n\n  addRecipe(recipe: Recipe): Observable<DbSuccessResponse> {\n    return this.http.post<DbSuccessResponse>(`${this.configuration.nestJSServerUrl}/recipes`, recipe);\n  }\n\n  updateRecipe(recipe: RecipeDb): Observable<DbSuccessResponse> {\n    return this.http.put<DbSuccessResponse>(`${this.configuration.nestJSServerUrl}/recipes`, recipe);\n  }\n\n  deleteRecipe(id: string): Observable<DbSuccessResponse> {\n    return this.http.get<DbSuccessResponse>(`${this.configuration.nestJSServerUrl}/recipes/${id}`);\n  }\n}\n"]}