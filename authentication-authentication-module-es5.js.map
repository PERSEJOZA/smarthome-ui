{"version":3,"sources":["webpack:///src/app/authentication/authentication-routing.module.ts","webpack:///src/app/authentication/authentication.module.ts","webpack:///src/app/authentication/components/login/login.component.ts","webpack:///src/app/authentication/components/login/login.component.html","webpack:///src/app/authentication/models/user.ts","webpack:///src/app/authentication/services/authentication.service.ts","webpack:///src/app/services/configuration.service.ts"],"names":["routes","path","component","redirectTo","AuthenticationRoutingModule","forChild","imports","exports","AuthenticationModule","declarations","LoginComponent","authenticationService","router","userInfoService","localStorage","clear","loginFrom","username","required","currentPassword","loginSubscription","login","value","subscribe","response","token","name","setUserInfo","navigate","registerSubscription","register","unsubscribe","selector","templateUrl","styleUrls","providers","User","password","AuthenticationService","http","configuration","post","nestJSServerUrl","ConfigurationService","providedIn"],"mappings":"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","file":"authentication-authentication-module-es5.js","sourcesContent":["import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\n\r\nimport {LoginComponent} from './components/login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: '',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthenticationRoutingModule {}\r\n","import {NgModule} from '@angular/core';\r\n\r\nimport {SharedModule} from '../shared/shared.module';\r\nimport {AuthenticationRoutingModule} from './authentication-routing.module';\r\nimport {LoginComponent} from './components/login/login.component';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [AuthenticationRoutingModule, SharedModule],\r\n  exports: [LoginComponent],\r\n})\r\nexport class AuthenticationModule {}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {Subscription} from 'rxjs';\r\nimport {UserInfoService} from 'src/app/services/user-info.service';\r\n\r\nimport {AuthenticationService} from '../../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n  providers: [AuthenticationService]\r\n})\r\nexport class LoginComponent implements OnInit, OnDestroy {\r\n  loginFrom: FormGroup;\r\n  loginSubscription: Subscription;\r\n  registerSubscription: Subscription;\r\n\r\n  constructor(\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router,\r\n    private userInfoService: UserInfoService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    localStorage.clear();\r\n    this.userInfoService.clear();\r\n    this.loginFrom = new FormGroup({\r\n      username: new FormControl('admin', Validators.required),\r\n      currentPassword: new FormControl('0000', Validators.required)\r\n    });\r\n  }\r\n\r\n  public login(): void {\r\n    this.loginSubscription = this.authenticationService\r\n      .login(this.loginFrom.value.username, this.loginFrom.value.currentPassword)\r\n      .subscribe((response: any) => {\r\n        delete localStorage.token;\r\n        localStorage.token = response.token;\r\n        delete localStorage.name;\r\n        localStorage.username = this.loginFrom.value.username;\r\n        this.userInfoService.setUserInfo();\r\n        this.router.navigate(['/food-planner']);\r\n      });\r\n  }\r\n\r\n  public register(): void {\r\n    this.registerSubscription = this.authenticationService\r\n      .register(this.loginFrom.value.username, this.loginFrom.value.currentPassword)\r\n      .subscribe((response: any) => {\r\n        delete localStorage.token;\r\n        localStorage.token = response.token;\r\n        delete localStorage.name;\r\n        localStorage.username = this.loginFrom.value.username;\r\n        this.userInfoService.setUserInfo();\r\n        this.router.navigate(['/food-planner']);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.loginSubscription) {\r\n      this.loginSubscription.unsubscribe();\r\n    }\r\n    if (this.registerSubscription) {\r\n      this.registerSubscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"login-form\">\r\n    <form id=\"loginForm\" [formGroup]=\"loginFrom\" (ngSubmit)=\"login()\">\r\n      <label for=\"username\">\r\n        Username:\r\n      </label>\r\n      <input\r\n        type=\"text\"\r\n        formControlName=\"username\"\r\n        id=\"username\"\r\n        autocomplete=\"username\"\r\n      />\r\n      <label for=\"password\">\r\n        Password:\r\n      </label>\r\n      <input\r\n        type=\"password\"\r\n        id=\"password\"\r\n        formControlName=\"currentPassword\"\r\n        autocomplete=\"current-password\"\r\n      />\r\n    </form>\r\n    <div>\r\n      <button type=\"submit\" form=\"loginForm\" [disabled]=\"!loginFrom.valid\">\r\n        Sign in\r\n      </button>\r\n      <button (click)=\"register()\" [disabled]=\"!loginFrom.valid\">\r\n        Register\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","export class User {\r\n  public constructor(public username: string, public password: string) {}\r\n}\r\n","import {HttpClient} from '@angular/common/http';\r\nimport {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {ConfigurationService} from 'src/app/services/configuration.service';\r\n\r\nimport {User} from '../models/user';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n  constructor(private http: HttpClient, private configuration: ConfigurationService) {}\r\n\r\n  public login(username: string, password: string): Observable<string> {\r\n    return this.http.post<string>(`${this.configuration.nestJSServerUrl}/login`, new User(username, password));\r\n  }\r\n\r\n  public register(username: string, password: string): Observable<string> {\r\n    return this.http.post<string>(`${this.configuration.nestJSServerUrl}/register`, new User(username, password));\r\n  }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {environment} from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigurationService {\n  public nestJSServerUrl = environment.nestJSServerUrl;\n}\n"]}